class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        int n = nums.size();
        vector<vector<int>> ans;

        //Optimal - Two Pointer - TC:O(n^2),SC:O(1);
        sort(nums.begin(),nums.end());
        for(int i=0;i<n;i++){
            if(i>0 && nums[i]==nums[i-1]){
                continue;
            }
            int j = i+1;
            int k = n-1;
            while(j<k){
                long long sum = nums[i] + nums[j] + nums[k];
                if(sum<0){
                    j++;
                }
                else if(sum>0){
                    k--;
                }
                else{
                   vector<int>temp = {nums[i],nums[j],nums[k]};
                    ans.push_back(temp);
                    j++;
                    k--;
                    while(nums[j]==nums[j-1] && j<k){
                        j++;
                    }
                    while(nums[k]==nums[k+1] && k>j){
                        k--;
                    }
                }
            }
        }


        ///set<vector<int>>st;
        //Better - HashMap - TC:O(n^2),SC:O(n);
        // for(int i=0;i<n;i++){
        //     set<int>hashset;
        //     for(int j=i+1;j<n;j++){
        //         int c = -(nums[i]+nums[j]);
        //         if(hashset.find(c)!=hashset.end()){
        //             vector<int>temp = {nums[i],nums[j],c};
        //             sort(temp.begin(),temp.end());
        //             st.insert(temp);
        //         }
        //         hashset.insert(nums[j]);
        //     }
        // }

        //Brute Force - For Loops - TC:O(n^3),SC:O(n);
        // for(int i=0;i<n;i++){
        //     for(int j=i+1;j<n;j++){
        //         for(int k=j+1;k<n;k++){
        //             long long sum = nums[i] + nums[j];
        //             sum = sum + nums[k];
        //             if(sum==0){
        //                 vector<int>temp = {nums[i],nums[j],nums[k]};
        //                 sort(temp.begin(),temp.end());
        //                 st.insert(temp);
        //             }
        //         }
        //     }
        // }
        //vector<vector<int>> ans(st.begin(),st.end());

        return ans;
    }
};
