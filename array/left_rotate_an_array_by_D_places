class Solution {
public:
    void rotate(vector<int>& nums, int k) {
        // vector<int>v;
        // int n=nums.size();
        // if(n>=k){
        // int t=n-k;
        // for(int i=t;i<n;i++){
        //     v.push_back(nums[i]);
        // }
        // for(int i=0;i<t;i++){
        //     v.push_back(nums[i]);
        // }
        // }
        // else{
        //     k=k%n;
        //     int t=n-k;
        //     for(int i=t;i<n;i++){
        //       v.push_back(nums[i]);
        //     }
        //     for(int i=0;i<t;i++){
        //       v.push_back(nums[i]);
        //     }
        // }
        // nums=v;
        int n = nums.size();
        k=k%n;
        k=n-k;
	   // Brute force - TC:O(n+k),SC:O(k) - 0.27 sec 
	   // int temp[k];
	   // for(int i=0;i<k;i++){
	   //    temp[i]=nums[i];
	   // }
	   // for(int i=k;i<n;i++){
	   //    nums[i-k]=nums[i];
	   // }
	   // for(int i=n-k;i<n;i++){
	   //    nums[i]=temp[i-(n-k)];
	   // }

      //Optimal Approch - TC:O(2n),SC:O(1) - 0.28 sec
	   reverse(nums.begin(),nums.begin()+k);
	   reverse(nums.begin()+k,nums.begin()+n);
	   reverse(nums.begin(),nums.begin()+n);
    }
};
