class Solution {
public:
  
    TreeNode* solve(vector<int>& postorder,int ps,int pe,vector<int>& inorder,int is,int ie,map<int,int>& mpp){

        if(ps > pe || is > ie){
            return NULL;
        }
        TreeNode* root = new TreeNode(postorder[pe]);
        int inRoot = mpp[root->val];
        int numsLeft = inRoot - is;

        root->left = solve(postorder,ps,ps + numsLeft -1,inorder,is,inRoot-1,mpp);
        root->right = solve(postorder,ps+numsLeft,pe -1,inorder,inRoot+1,ie,mpp);
        
        return root;
    }
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        map<int,int>mpp;
        for(int i=0;i<inorder.size();i++){
            mpp[inorder[i]]=i;
        }
        TreeNode* root = solve(postorder,0,postorder.size()-1,inorder,0,inorder.size()-1,mpp);
        return root;
    }
};
