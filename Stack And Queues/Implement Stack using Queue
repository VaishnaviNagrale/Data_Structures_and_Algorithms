class MyStack {
public:
    MyStack() {
        
    }
//Function into stack using single queue.
    //Approch 2 TC:O(n) SC:O(n)
    queue<int> q;
    void push(int x){
      q.push(x);
      for(int i=1;i<q.size();++i){
          q.push(q.front());
          q.pop();
      }
    }

    int pop(){
      if(q.empty()){
          return -1;
      }
      int num=q.front();
      q.pop();
      return num;
    }

    int top(){
      if(q.empty()){
          return -1;
      }
      return q.front();
    }

    bool empty() {
        if(q.empty()){
            return 1;
        }
        return 0;
    }
//Function into into stack using two queues.
    //Approch 1 TC:O(n) SC:O(2*n)
    // queue<int> q1;
    // queue<int> q2;
    // void push(int x) {
    //   q2.push(x);
    //   while(!q1.empty()){
    //       q2.push(q1.front());
    //       q1.pop();
    //   }
    //   while(!q2.empty()){
    //       q1.push(q2.front());
    //       q2.pop();
    //   }
    // }
    
    // int pop() {
    //   if(q1.empty()){
    //     return -1;
    //   }
    //   int num=q1.front();
    //   q1.pop();
    //   return num;
    // }
    
    // int top() {
    //   if(q1.empty()){
    //     return -1;
    //   }
    //   return q1.front();
    // }
    
    // bool empty() {
    //     if(q1.empty() && q2.empty()){
    //         return 1;
    //     }
    //     return 0;
    // }
};
