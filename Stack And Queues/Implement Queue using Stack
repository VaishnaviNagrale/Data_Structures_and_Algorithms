class MyQueue {
public:
    MyQueue() {
        
    }
    stack<int> input, output;
    // Approch-2 TC:O(1) SC:O(2*n)
    void push(int x){
        input.push(x);
    }
    
    int pop(){
        int num;
        if(!output.empty()){
            num=output.top();
            output.pop();
        }
        else{
            while(!input.empty()){
                output.push(input.top());
                input.pop();
            }
            num=output.top();
            output.pop();
        }
        return num;
    }

    int peek() {
        if(!output.empty()){
            return output.top();
        }
        else{
            while(!input.empty()){
                output.push(input.top());
                input.pop();
            }
            return output.top();
        }
        return -1;
    }

    bool empty() {
        if(output.empty() && input.empty()){
            return 1;
        }
        return 0;
    }

    // Approch-1 TC:O(n) SC:O(2*n)
    // void push(int x) {
    //     while(!input.empty()){
    //         output.push(input.top());
    //         input.pop();
    //     }
    //     input.push(x);
    //     while(!output.empty()){
    //         input.push(output.top());
    //         output.pop();
    //     }
    // }
    
    // int pop() {
    //     int num=input.top();
    //     input.pop();
    //     return num;
    // }
    
    // int peek() {
    //     return input.top();
    // }
    
    // bool empty() {
    //     if(output.empty() && input.empty()){
    //         return 1;
    //     }
    //     return 0;
    // }
};
