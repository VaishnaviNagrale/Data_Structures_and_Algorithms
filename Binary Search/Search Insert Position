class Solution {
public:
    int lower_bound(vector<int>nums, int N, int target){
        int low = 0,high = N-1;
        int ans = N;
        while(low<=high){
            int mid = low + (high - low)/2;
            if(nums[mid]>=target){
                ans = mid;
                high = mid-1;
            }
            else{
                low = mid+1;
            }
        }
        return ans;
    }
    int searchInsert(vector<int>& nums, int target) {
        return lower_bound(nums,nums.size(),target);
    //     int i = 0,j = 1;
    //     int flag=0;
    //     while(i <nums.size() && j<nums.size()){
    //         if(nums[i]==target){
    //             return i;
    //         }
    //         else if(nums[i]<target && nums[j]>=target){
    //             flag=j;
    //         }
    //         i++;
    //         j++;
    //     }
    //     if(target>nums[nums.size()-1]){
    //             flag=nums.size();
    //     }
    //     return flag;
     }
};
