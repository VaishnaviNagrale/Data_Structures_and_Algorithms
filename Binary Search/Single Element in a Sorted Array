class Solution {
public:
    int binarySearch(vector<int>& nums,int n){
        if(n==1){
            return nums[0];
        }
        else if(nums[0]!=nums[1]){
            return nums[0];
        }
        else if(nums[n-1]!=nums[n-2]){
            return nums[n-1];
        }
        int low=1;
        int high=n-2;

        while(low<=high){
            long long mid = low + (high-low)/2;
            if(nums[mid]!=nums[mid+1] && nums[mid]!=nums[mid-1]){
                return nums[mid];
            }
            else if((mid%2==1 && nums[mid]==nums[mid-1] ) || (mid%2==0 && nums[mid]==nums[mid+1])){
                low =mid+1;
            }
            else {
                high = mid-1;
            }
        }
        return -1;
    }
    
    // int xorWay(vector<int>& nums,int n){
    //     int xorEle = 0;
    //     for(int i=0;i<n;i++){
    //         xorEle = xorEle ^ nums[i];
    //     }
    //     return xorEle;
    // }
    
   int singleNonDuplicate(vector<int>& nums) {
       int n=nums.size();
       if(n==1){
            return nums[0];
        }
        else if(nums[0]!=nums[1]){
            return nums[0];
        }
        else if(nums[n-1]!=nums[n-2]){
            return nums[n-1];
        }
        //Optimal - TC:O(logn),SC:O(1)
        return binarySearch(nums,n);
        
         //Brute force - XOR - TC:O(n),SC:O(1)
        //return xorWay(nums,n);
        
        //Brute force - TC:O(n),SC:O(1)
        // for(int i=0;i<n;i++){
        //     if(i==0){
        //         if(nums[i]!=nums[i+1]){
        //             return nums[i];
        //         }
        //     }
        //     else if(i==n-1){
        //         if(nums[i]!=nums[i-1]){
        //             return nums[i];
        //         }
        //     }
        //     else{
        //         if(nums[i]!=nums[i+1] && nums[i]!=nums[i-1]){
        //             return nums[i];
        //         }
        //     }
        // }
        // return -1;
    }
};
