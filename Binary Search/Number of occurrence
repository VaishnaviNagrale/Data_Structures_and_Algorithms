//User function template for C++
class Solution{
public:	
	/* if x is present in arr[] then returns the count
		of occurrences of x, otherwise returns 0. */
	int first(int arr[], int n, int x){
            int low = 0,high = n-1;
            int ans = -1;
            while(low<=high){
                int mid = low + (high - low)/2;
                if(arr[mid]==x){
                    ans = mid;
                    high=mid-1;
                }
                else if(arr[mid]<x){
                    low = mid+1;
                }
                else{
                    high = mid-1;
                }
            }
            return ans;
    }
    int last(int arr[], int n, int x){
            int low = 0,high = n-1;
            int ans = -1;
            while(low<=high){
                int mid = low + (high - low)/2;
                if(arr[mid]==x){
                    ans = mid;
                    low=mid+1;
                }
                else if(arr[mid]<x){
                    low = mid+1;
                }
                else{
                    high = mid-1;
                }
            }
            return ans;
    }
    int count(int arr[], int n, int x) {
        int a=first(arr,n,x);
        int b=last(arr,n,x);
        if(a==-1 && b==-1){
            return 0;
        }
        return {b-a+1};
    
    //Optimal - TC:O(logn),SC:O(1)
    // int* lb=lower_bound(arr,arr+n,x);
    // int* ub=upper_bound(arr,arr+n,x);
    // if(lb==arr+n || *lb!=x){
    //     return 0;
    // }
    // return {ub-lb};
    
    //Brute force - TC:O(n),SC:O(1)
    // int first=-1,last=-1;
    // for(int i=0;i<n;i++){
    //     if(arr[i]==x){
    //     if(first==-1){
    //         first=i;
    //     }
    //     last=i;
    //     }
    // }
    // if(first==-1 && last==-1){
    //     return 0;
    // }
    // return {last-first+1};
     }
};
