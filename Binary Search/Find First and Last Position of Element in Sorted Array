class Solution {
public:
    int first(vector<int>& nums, int target){
            int low = 0,high = nums.size()-1;
            int ans = -1;
            while(low<=high){
                int mid = low + (high - low)/2;
                if(nums[mid]==target){
                    ans = mid;
                    high=mid-1;
                }
                else if(nums[mid]<target){
                    low = mid+1;
                }
                else{
                    high = mid-1;
                }
            }
            return ans;
    }
    int last(vector<int>& nums, int target){
            int low = 0,high = nums.size()-1;
            int ans = -1;
            while(low<=high){
                int mid = low + (high - low)/2;
                if(nums[mid]==target){
                    ans = mid;
                    low=mid+1;
                }
                else if(nums[mid]<target){
                    low = mid+1;
                }
                else{
                    high = mid-1;
                }
            }
            return ans;
    }
    vector<int> searchRange(vector<int>& nums, int target) {
        return {first(nums,target),last(nums,target)};
    //int n = nums.size();
    //Optimal - TC:O(logn),SC:O(1)
    // int lb=lower_bound(nums.begin(),nums.end(),target)-nums.begin();
    // int ub=upper_bound(nums.begin(),nums.end(),target)-nums.begin();
    // if(lb==n || nums[lb]!=target){
    //     return {-1,-1};
    // }
    // return {lb,ub-1};
    
    //Brute force - TC:O(n),SC:O(1)
    // int first=-1,last=-1;
    // for(int i=0;i<n;i++){
    //     if(nums[i]==target){
    //     if(first==-1){
    //         first=i;
    //     }
    //     last=i;
    //     }
    // }
    // return {first,last};
    }
};
