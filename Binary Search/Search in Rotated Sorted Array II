class Solution {
public:
    int binarySearch(vector<int>& nums,int low,int high,int target){
        while(low<=high){
            long long mid = low + (high-low)/2;
            if(nums[mid]==target){
                return 1;
            }
            if(nums[low]==nums[mid] && nums[mid]==nums[high]){
                low++;
                high--;
                continue;
            }
            else if(nums[low]<=nums[mid]){
                if(nums[low]<=target && target<=nums[mid]){
                    high=mid-1;
                }
                else{
                    low=mid+1;
                }
            }
            else{
                if(nums[mid]<=target && target<=nums[high]){
                    low=mid+1;
                }
                else{
                    high=mid-1;
                }
            }
        }
        return 0;
    }
   bool search(vector<int>& nums, int target) {
        //Optimal - TC:O(logn),SC:O(1)
        return binarySearch(nums,0,nums.size()-1,target);
        
        //Brute force - TC:O(n),SC:O(1)
        // for(int i=0;i<nums.size();i++){
        //     if(nums[i]==target){
        //         return 1;
        //     }
        // }
        // return 0;
    }
};
