class Solution {
public:
    ListNode* InsertAtEnd(ListNode* head, int x) {
    ListNode* n = new ListNode(x);
    if (head == NULL) {
        return n;
    }
    ListNode* temp = head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = n;
    n->next = NULL;
    return head;
}

ListNode* reverse(ListNode* head) {
    if (head == NULL || head->next == NULL) {
        return head;
    }
    ListNode* newHead = reverse(head->next);
    head->next->next = head;
    head->next = NULL;
    return newHead;
}

ListNode* add(ListNode* first, ListNode* second) {
    ListNode* head = NULL;
    int carry = 0;
    while (first != NULL || second != NULL || carry != 0) {
        int val1 = (first != NULL) ? first->val : 0;
        int val2 = (second != NULL) ? second->val : 0;
        int sum = carry + val1 + val2;
        carry = sum / 10;
        sum %= 10;
        head = InsertAtEnd(head, sum);
        if (first != NULL) {
            first = first->next;
        }
        if (second != NULL) {
            second = second->next;
        }
    }
    return head;
}

    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        //ListNode* head1 = reverse(l1);
        //ListNode* head2 = reverse(l2);

        ListNode* ans = add(l1, l2);
        //ans=reverse(ans);
        return ans;

        // ListNode* l3=new ListNode(0);
        // ListNode* temp=l3;
        // int s=0;
        // while(l1!=NULL || l2!=NULL || s!=0){
        //     int x=l1 ? l1->val : 0;
        //     int y=l2 ? l2->val : 0;
        //     int sum = x+y+s;
        //     s=sum/10;
        //     temp->next=new ListNode(sum%10);
        //     temp=temp->next;
        //     l1=l1 ? l1->next : nullptr;
        //     l2=l2 ? l2->next : nullptr;
        // }
        // return l3->next;
        }
};
