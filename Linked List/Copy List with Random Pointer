/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/

class Solution {
public:
   Node* InsertAtEnd(Node* head, int x) {
    Node* n = new Node(x);
    if (head == NULL) {
        return n;
    }
    Node* temp = head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = n;
    n->next = NULL;
    return head;
}

Node* copyRandomList(Node* head) {
    if (head == NULL) {
        return NULL;
    }
    Node* cloneHead = NULL;
    Node* temp = head;
    while (temp != NULL) {
        cloneHead = InsertAtEnd(cloneHead, temp->val);
        temp = temp->next;
    }

    unordered_map<Node*, Node*> mpp;
    Node* originalNode = head;
    Node* cloneNode = cloneHead;
    while (originalNode != NULL) {
        mpp[originalNode] = cloneNode;
        originalNode = originalNode->next;
        cloneNode = cloneNode->next;
    }

    originalNode = head;
    cloneNode = cloneHead;
    while (originalNode != NULL) {
        cloneNode->random = mpp[originalNode->random];
        originalNode = originalNode->next;
        cloneNode = cloneNode->next;
    }

    return cloneHead;
}
};
