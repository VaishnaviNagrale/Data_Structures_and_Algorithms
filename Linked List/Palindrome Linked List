class Solution {
public:
    // bool checkPalindrome(vector<int> v){
    //     int i=0,j=v.size()-1;
    //     while(i<=j){
    //         if(v[i]==v[j]){
    //             i++;
    //             j--;
    //         }
    //         else{
    //             return 0;
    //         }
    //     }
    //     return 1;
    // }
    ListNode* reverse(ListNode* head){
        if(head==NULL || head->next==NULL){
            return head;
        }
        ListNode* newHead = reverse(head->next);
        head->next->next=head;
        head->next=NULL;
        return newHead;
    }
    ListNode* getMiddle(ListNode* head){
        ListNode* slow=head;
        ListNode* fast=head->next;
        while(fast!=NULL && fast->next!=NULL){
            slow=slow->next;
            fast=fast->next->next;
        }
        return slow;
    }
    bool isPalindrome(ListNode* head) {
        //Optimal
        ListNode* mid=getMiddle(head);
        
        ListNode* temp=mid->next;
        mid->next=reverse(temp);
        
        ListNode* head1=head;
        ListNode* head2=mid->next;
        
        while(head2!=NULL){
            if(head1->val!=head2->val){
                return 0;
            }
            head1=head1->next;
            head2=head2->next;
        }
        mid->next=reverse(mid->next);
        return 1;
        
        //Brute Force
    //   vector<int>v;
    //   ListNode* temp=head;
    //   while(temp!=NULL){
    //       v.push_back(temp->val);
    //       temp=temp->next;
    //   }
    //   return checkPalindrome(v);
    }
};
