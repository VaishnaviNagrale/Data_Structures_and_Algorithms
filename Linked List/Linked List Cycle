class Solution {
public:
    bool hasCycle(ListNode *head) {
        // By Map
        // map<ListNode*,bool>vs;
        // ListNode* temp=head;
        // while(temp!=NULL){
        //     if(vs[temp]==1){
        //         return 1;
        //     }
        //     vs[temp]=1;
        //     temp=temp->next;
        // }
        // return 0;
        
        //By Flyod's Algorithm
        ListNode* slow=head;
        ListNode* fast=head;
        while(fast!=NULL && fast->next!=NULL){
            slow=slow->next;
            fast=fast->next->next;
            if(slow==fast){
                return 1;
            }
        }
        return 0;

        // if(head==NULL){
        //     return false;
        // }
        // ListNode* fast=head;
        // ListNode* slow=head;
        // while(fast != NULL && fast->next != NULL){
        //     slow=slow->next;
        //     fast=fast->next->next;
        //     if(fast==slow){
        //       return true;
        //      }
        // }
        // return false;
    }
};
